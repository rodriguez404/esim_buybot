from aiogram import Dispatcher, Bot, Router
from config import BOT_TOKEN
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.storage.redis import RedisStorage
from redis_folder.redis_client import AsyncDummyRedis, init_redis_connection
from middleware.I18n_middleware import I18nMiddleware
from middleware.user_rights_middleware import UserRightsMiddleware

import logging

bot = Bot(token=BOT_TOKEN)
router = Router()

dp = None  # –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ Redis



"""
–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ storage –¥–ª—è Dispatcher. –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π Redis - —Å—Ç–∞–≤–∏—Ç RedisStorage(), –∏–Ω–∞—á–µ –ª–æ–∫–∞–ª—å–Ω—ã–π MemoryStorage()
Storage –Ω—É–∂–µ–Ω –¥–ª—è FSM (FSMContext). –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏–≥–¥–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –±–æ—Ç–∞ –Ω–∏–∫–∞–∫ –Ω–µ –∑–∞–º–µ–¥–ª—è–µ—Ç. –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏
–ü–æ—á–µ–º—É –ø—Ä–æ—Å—Ç–æ –Ω–µ –æ–±—ä—è–≤–∏—Ç—å –ø–æ –¥–µ—Ñ–æ–ª—Ç—É dp = Dispatcher(storage=MemoryStorage()), 
–∞ –ø–æ—Ç–æ–º –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–¥–∏—Å–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞ dp = Dispatcher(storage=RedisStorage()) ?
–ü–æ—Ç–æ–º—É —á—Ç–æ "–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏" –Ω–µ –±—É–¥–µ—Ç. –í aiogram 3.x –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∏—Å–ø–∞—Ç—á–µ—Ä–æ–≤,
–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å dp = Dispatcher(...) —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–π –¥–∏—Å–ø–∞—Ç—á–µ—Ä, –¥–∞–∂–µ –æ—Ç—Å—ã–ª–∞—è—Å—å –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
"""
async def init_dispatcher():
    global dp

    redis = await init_redis_connection()

    # –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª —Ä–µ–¥–∏—Å –∏ –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–æ–π
    if redis and not isinstance(redis, AsyncDummyRedis):
        storage = RedisStorage(redis=redis)
        logging.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è RedisStorage")
    # –∏–Ω–∞—á–µ - –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    else:
        storage = MemoryStorage()
        logging.info("üß† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MemoryStorage")

    dp = Dispatcher(storage=storage)
    dp.include_router(router)
    dp.update.middleware(I18nMiddleware())
    dp.update.middleware(UserRightsMiddleware())
    return dp
