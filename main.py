import logging
import asyncio

from api.http_client import close_session

from aiogram import Bot, types
from aiogram.types import BotCommand
from aiogram.filters.command import Command

from loader import bot, init_dispatcher, router
from redis_folder.functions.set_static_cache import set_static_cache
from redis_folder.redis_client import get_redis

# –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, —á—Ç–æ –≤–∏–∑—É–∞–ª—å–Ω–æ –≤ –º–µ–π–Ω–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
from handlers.menu import reply_menu, inline_menu
from handlers.callbacks import callbacks_reply_menu, callbacks_inline_menu

from tortoise.exceptions import DoesNotExist  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è

from localization.localization import load_locales

from database import init_db
from database.models.user import DataBase_User  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ User
from database.services.user_service import get_or_create_user_db
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–¥
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from microservices.update_all_packages import update_all_packages
from database.services.admin_tariff_groups_service import update_admin_tariff_groups

logging.basicConfig(level=logging.DEBUG)

# –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="Welcome"),
        BotCommand(command="id", description="My id"),
    ]
    await bot.set_my_commands(commands)

@router.message(Command("start"))
async def cmd_start(message: types.Message, user_language: str, user_rights: str):
    await get_or_create_user_db(message.from_user)
    await reply_menu.show_reply_menu(message, user_language, user_rights)   # –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

@router.message(Command("id"))
async def cmd_id(message: types.Message):
    telegram_user = message.from_user
    await message.answer(str(telegram_user.id))


async def main():
    load_locales() # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    await init_db()

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ - –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î
    # scheduler = AsyncIOScheduler()
    # scheduler.add_job(update_all_packages, 'interval', hours=24) # –û–±–Ω–æ–≤–ª—è—Ç—å –≤—Å—ë –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    # scheduler.start()
    # print("üîÅ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    dp = await init_dispatcher()

    await set_static_cache()
    # await update_admin_tariff_groups() # –¥–ª—è –¥–µ–±–∞–≥-—Å—Ç–∞—Ä—Ç–∞, –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ –Ω–µ –Ω—É–∂–Ω–æ

    await set_commands(bot) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é —Å–ª–µ–≤–∞
    try:
        await dp.start_polling(bot)
    finally:
        await get_redis().close()
        await close_session()
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())